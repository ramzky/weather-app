(()=>{"use strict";var n={426:(n,e,r)=>{r.d(e,{Z:()=>A});var t=r(537),o=r.n(t),i=r(645),a=r.n(i)()(o());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Quicksand:wght@300;500&display=swap);"]),a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Quicksand:wght@700&display=swap);"]),a.push([n.id,":root {\n  box-sizing: border-box;\n  --main-size: 60rem; /* 30rem=480px */\n  --sub-color: #8d8d8d;\n  font-family:'Segoe UI', Tahoma, Geneva, Verdana sans-serif;\n  font-family: 'Quicksand', sans-serif;\n}\n*, *::before, *::after {\n  box-sizing: inherit;\n}\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n.main-container {\n  min-height: 100vh;\n  /*display: flex;*/\n  background-color: #ffffff;\n}\n.container {\n  margin: 0 auto;\n  flex: 0 0 auto;\n  /*background-image: url('./bg.jpg');*/\n  /*use below bg on menu tab*/\n  /*background: linear-gradient(rgba(0,0,0,.4), rgba(0,0,0,.4)), url('./bg.jpg');*/\n}\n.flex-top-box {\n  width: min(max(calc(var(--main-size) - 15rem), 100%), calc(var(--main-size)));\n  min-height: calc(var(--main-size) - 15rem);\n  /*border: 0.0625rem solid black;*/\n  background-color: #ffffff;\n  display: flex;\n  flex-flow: row wrap;\n  margin: 0 auto;\n}\n.flex-box {\n  /*min-height: 2.5rem;*/\n  flex: 0 0 100%;\n  display: flex;\n  flex-flow: row wrap;\n  /*border: 0.0625rem solid goldenrod;*/\n}\n/*\nfor flex let the item that change size\nto set the width of flex container\n**dont set width!\n*/\n.flex-item {\n  flex: 0 0 100%;\n  /*border: 0.0625rem solid goldenrod;*/\n}\n\n.content{\n  padding-top: 8rem;\n  color: var(--sub-color);\n}\n.content p {\n  margin: 0;\n}\n.top, .mid, .bottom, .switch {\n  /*border: 0.0625rem solid black;*/\n  padding: 1.5rem 0;\n}\n\n.top {\n  justify-content: center;\n}\n.top p {\n  text-align: center;\n  font-size: 1.8rem;\n}\n.top > div {\n  max-width: 30rem;\n  padding: 0 1rem;\n  white-space: nowrap;\n}\n.top .place {\n  border: none;\n  border-bottom: 0.1rem solid var(--sub-color);\n  min-width: 3rem;\n  font-family: inherit;\n  font-size: 1.8rem;\n  font-weight: bold;\n  color: #111;\n  padding: 0 1rem;\n  display: flex;\n\n  white-space: nowrap;\n  /*text-overflow: ellipsis;*/\n  overflow: hidden;\n}\n.top .place:focus {\n  outline: none;\n}\n\n.mid {\n  text-align: center;\n}\n.mid .condition,\n.mid .temp,\n.mid .details {\n  flex: 1 0 33%;\n}\n.mid .condition img {\n  height: 12rem;\n  object-fit: contain;\n}\n.mid .temp p:nth-child(1) {\n  font-size: 6rem;\n  color: #111;\n}\n.mid .details {\n  font-size: 1.2rem;\n  align-self: center;\n  /*flex: 1 1 33%;*/\n}\n.mid .details img {\n  height: 1.5em;\n  padding: 0 .3em;\n}\n.mid .details p {\n  display: inline;\n  font-size: 2em;\n}\n\n.bottom div {\n  flex: 1 0 25%;\n  text-align: center;\n  font-size: 1rem;\n}\n.bottom img {\n  height: 2rem;\n  object-fit: contain;\n}\n.bottom div img + p{\n  font-size: 2em;\n}\n\n.switch {\n  text-align: center;\n}\n.switch button {\n  padding: 0 .5rem;\n  background-color: transparent;\n  color: var(--sub-color);\n  border: none;\n  font-size: 1rem;\n  border-radius: .1rem;\n  font-family: inherit;\n}\n.switch button:hover {\n  cursor: pointer;\n  /*color: #7287E9;*/\n  /*background-color: #d6d6d6;*/\n  /*font-weight: bold;*/\n}\n.switch .cel {\n  border-right: .1rem solid var(--sub-color);\n}\n.switch .fah {\n  border-left: .1rem solid var(--sub-color);\n}\n.selected {\n  font-weight: bold;\n}\n\n/*\n  test animations\n*/\np {\n  animation: anim 2s ease-in-out 0s 1;\n}\n@keyframes anim {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAGA;EACE,sBAAsB;EACtB,kBAAkB,EAAE,gBAAgB;EACpC,oBAAoB;EACpB,0DAA0D;EAC1D,oCAAoC;AACtC;AACA;EACE,mBAAmB;AACrB;AACA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,iBAAiB;EACjB,iBAAiB;EACjB,yBAAyB;AAC3B;AACA;EACE,cAAc;EACd,cAAc;EACd,qCAAqC;EACrC,2BAA2B;EAC3B,gFAAgF;AAClF;AACA;EACE,6EAA6E;EAC7E,0CAA0C;EAC1C,iCAAiC;EACjC,yBAAyB;EACzB,aAAa;EACb,mBAAmB;EACnB,cAAc;AAChB;AACA;EACE,sBAAsB;EACtB,cAAc;EACd,aAAa;EACb,mBAAmB;EACnB,qCAAqC;AACvC;AACA;;;;CAIC;AACD;EACE,cAAc;EACd,qCAAqC;AACvC;;AAEA;EACE,iBAAiB;EACjB,uBAAuB;AACzB;AACA;EACE,SAAS;AACX;AACA;EACE,iCAAiC;EACjC,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;AACzB;AACA;EACE,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,gBAAgB;EAChB,eAAe;EACf,mBAAmB;AACrB;AACA;EACE,YAAY;EACZ,4CAA4C;EAC5C,eAAe;EACf,oBAAoB;EACpB,iBAAiB;EACjB,iBAAiB;EACjB,WAAW;EACX,eAAe;EACf,aAAa;;EAEb,mBAAmB;EACnB,2BAA2B;EAC3B,gBAAgB;AAClB;AACA;EACE,aAAa;AACf;;AAEA;EACE,kBAAkB;AACpB;AACA;;;EAGE,aAAa;AACf;AACA;EACE,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,eAAe;EACf,WAAW;AACb;AACA;EACE,iBAAiB;EACjB,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,aAAa;EACb,eAAe;AACjB;AACA;EACE,eAAe;EACf,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,kBAAkB;EAClB,eAAe;AACjB;AACA;EACE,YAAY;EACZ,mBAAmB;AACrB;AACA;EACE,cAAc;AAChB;;AAEA;EACE,kBAAkB;AACpB;AACA;EACE,gBAAgB;EAChB,6BAA6B;EAC7B,uBAAuB;EACvB,YAAY;EACZ,eAAe;EACf,oBAAoB;EACpB,oBAAoB;AACtB;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,6BAA6B;EAC7B,qBAAqB;AACvB;AACA;EACE,0CAA0C;AAC5C;AACA;EACE,yCAAyC;AAC3C;AACA;EACE,iBAAiB;AACnB;;AAEA;;CAEC;AACD;EACE,mCAAmC;AACrC;AACA;EACE;IACE,UAAU;EACZ;EACA;IACE,UAAU;EACZ;AACF",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@300;500&display=swap');\r\n@import url('https://fonts.googleapis.com/css2?family=Quicksand:wght@700&display=swap');\r\n\r\n:root {\r\n  box-sizing: border-box;\r\n  --main-size: 60rem; /* 30rem=480px */\r\n  --sub-color: #8d8d8d;\r\n  font-family:'Segoe UI', Tahoma, Geneva, Verdana sans-serif;\r\n  font-family: 'Quicksand', sans-serif;\r\n}\r\n*, *::before, *::after {\r\n  box-sizing: inherit;\r\n}\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n.main-container {\r\n  min-height: 100vh;\r\n  /*display: flex;*/\r\n  background-color: #ffffff;\r\n}\r\n.container {\r\n  margin: 0 auto;\r\n  flex: 0 0 auto;\r\n  /*background-image: url('./bg.jpg');*/\r\n  /*use below bg on menu tab*/\r\n  /*background: linear-gradient(rgba(0,0,0,.4), rgba(0,0,0,.4)), url('./bg.jpg');*/\r\n}\r\n.flex-top-box {\r\n  width: min(max(calc(var(--main-size) - 15rem), 100%), calc(var(--main-size)));\r\n  min-height: calc(var(--main-size) - 15rem);\r\n  /*border: 0.0625rem solid black;*/\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  margin: 0 auto;\r\n}\r\n.flex-box {\r\n  /*min-height: 2.5rem;*/\r\n  flex: 0 0 100%;\r\n  display: flex;\r\n  flex-flow: row wrap;\r\n  /*border: 0.0625rem solid goldenrod;*/\r\n}\r\n/*\r\nfor flex let the item that change size\r\nto set the width of flex container\r\n**dont set width!\r\n*/\r\n.flex-item {\r\n  flex: 0 0 100%;\r\n  /*border: 0.0625rem solid goldenrod;*/\r\n}\r\n\r\n.content{\r\n  padding-top: 8rem;\r\n  color: var(--sub-color);\r\n}\r\n.content p {\r\n  margin: 0;\r\n}\r\n.top, .mid, .bottom, .switch {\r\n  /*border: 0.0625rem solid black;*/\r\n  padding: 1.5rem 0;\r\n}\r\n\r\n.top {\r\n  justify-content: center;\r\n}\r\n.top p {\r\n  text-align: center;\r\n  font-size: 1.8rem;\r\n}\r\n.top > div {\r\n  max-width: 30rem;\r\n  padding: 0 1rem;\r\n  white-space: nowrap;\r\n}\r\n.top .place {\r\n  border: none;\r\n  border-bottom: 0.1rem solid var(--sub-color);\r\n  min-width: 3rem;\r\n  font-family: inherit;\r\n  font-size: 1.8rem;\r\n  font-weight: bold;\r\n  color: #111;\r\n  padding: 0 1rem;\r\n  display: flex;\r\n\r\n  white-space: nowrap;\r\n  /*text-overflow: ellipsis;*/\r\n  overflow: hidden;\r\n}\r\n.top .place:focus {\r\n  outline: none;\r\n}\r\n\r\n.mid {\r\n  text-align: center;\r\n}\r\n.mid .condition,\r\n.mid .temp,\r\n.mid .details {\r\n  flex: 1 0 33%;\r\n}\r\n.mid .condition img {\r\n  height: 12rem;\r\n  object-fit: contain;\r\n}\r\n.mid .temp p:nth-child(1) {\r\n  font-size: 6rem;\r\n  color: #111;\r\n}\r\n.mid .details {\r\n  font-size: 1.2rem;\r\n  align-self: center;\r\n  /*flex: 1 1 33%;*/\r\n}\r\n.mid .details img {\r\n  height: 1.5em;\r\n  padding: 0 .3em;\r\n}\r\n.mid .details p {\r\n  display: inline;\r\n  font-size: 2em;\r\n}\r\n\r\n.bottom div {\r\n  flex: 1 0 25%;\r\n  text-align: center;\r\n  font-size: 1rem;\r\n}\r\n.bottom img {\r\n  height: 2rem;\r\n  object-fit: contain;\r\n}\r\n.bottom div img + p{\r\n  font-size: 2em;\r\n}\r\n\r\n.switch {\r\n  text-align: center;\r\n}\r\n.switch button {\r\n  padding: 0 .5rem;\r\n  background-color: transparent;\r\n  color: var(--sub-color);\r\n  border: none;\r\n  font-size: 1rem;\r\n  border-radius: .1rem;\r\n  font-family: inherit;\r\n}\r\n.switch button:hover {\r\n  cursor: pointer;\r\n  /*color: #7287E9;*/\r\n  /*background-color: #d6d6d6;*/\r\n  /*font-weight: bold;*/\r\n}\r\n.switch .cel {\r\n  border-right: .1rem solid var(--sub-color);\r\n}\r\n.switch .fah {\r\n  border-left: .1rem solid var(--sub-color);\r\n}\r\n.selected {\r\n  font-weight: bold;\r\n}\r\n\r\n/*\r\n  test animations\r\n*/\r\np {\r\n  animation: anim 2s ease-in-out 0s 1;\r\n}\r\n@keyframes anim {\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n}"],sourceRoot:""}]);const A=a},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var A=0;A<this.length;A++){var c=this[A][0];null!=c&&(a[c]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);t&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var i={},a=[],A=0;A<n.length;A++){var c=n[A],s=t.base?c[0]+t.base:c[0],l=i[s]||0,d="".concat(s," ").concat(l);i[s]=l+1;var f=r(d),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==f)e[f].references++,e[f].updater(u);else{var m=o(u,t);t.byIndex=A,e.splice(A,0,{identifier:d,updater:m,references:1})}a.push(d)}return a}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var i=t(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var A=r(i[a]);e[A].references--}for(var c=t(n,o),s=0;s<i.length;s++){var l=r(i[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=c}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var i=e[t]={id:t,exports:{}};return n[t](i,i.exports,r),i.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;r.g.importScripts&&(n=r.g.location+"");var e=r.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var t=e.getElementsByTagName("script");if(t.length)for(var o=t.length-1;o>-1&&!n;)n=t[o--].src}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=n})(),r.nc=void 0,(()=>{async function n(n="marikina"){try{return fetch(`https://api.weatherapi.com/v1/forecast.json?key=9ea9fe41085d4e4f85b115923230209&q=${n}&days=1&aqi=no&alerts=no`,{mode:"cors"}).then((n=>n.json())).then((n=>(console.log(n),n)))}catch(n){console.log(n)}}const e=r.p+"1f7d921806902adcb4fa.svg",t=r.p+"c70343e1873a17ca9430.svg",o=r.p+"a9a9e84741cebbffed0e.svg",i=r.p+"f6d1dfa09f672bae85cd.svg",a=r.p+"5866ee37891df2967276.svg",A=r.p+"f85580bacf4ccd7441c2.svg";function c(n){const r="rain",c="sun",s="cloudy",l="overcast",d="snow";let f="",u="",m=n;const p=n=>{m=n,(()=>{const n=m.condition.text.toLowerCase();u=n.includes(r)?r:n.includes(c)?c:n.includes(l)?l:n.includes(s)?s:n.includes(d)?d:""})(),(()=>{switch(u){case r:f=e;break;case c:f=t;break;case l:f=i;break;case s:f=o;break;case d:f=a}})()};return p(n),document.querySelector(".details > div:first-child img").src=A,{getPath:()=>f,updateData:p}}function s(){const n="rain",r="sun",A="cloudy",s="overcast",l="snow",d="",f="cel",u="fah";let m,p=n,C="";const h=[],g=document.querySelector(".cel"),b=document.querySelector(".fah"),E=(document.querySelector(".place"),document.querySelector(".top > p:last-child")),B=document.querySelector(".mid p:first-child"),y=document.querySelector(".mid p:last-child"),v=document.querySelector(".mid .details .rain-chance"),w=document.querySelectorAll(".bottom > div p:nth-child(2)"),x=document.querySelector(".mid .condition img"),k=document.querySelectorAll(".bottom > div img:nth-child(1)"),z=()=>{const n=document.querySelectorAll(".switch button"),e=Array.from(n).filter((n=>n.classList.contains("selected")));C=e[0].classList.contains(f)?f:u},S=n=>{const e=document.querySelectorAll(".switch button");Array.from(e).forEach((n=>{n.classList.remove("selected")})),n.target.classList.add("selected"),z()},j=n=>{C===f&&C===u||z();let e=parseFloat(n.current.temp_c),r=[];n.forecast.forecastday[0].hour.forEach((n=>r.push(parseFloat(n.temp_c)))),C===u&&(e=9*e/5+32,r[9]=9*r[9]/5+32,r[12]=9*r[9]/5+32,r[15]=9*r[9]/5+32,r[18]=9*r[9]/5+32),B.textContent=Math.round(10*e)/10+"°",v.textContent=n.forecast.forecastday[0].day.daily_chance_of_rain,w[0].textContent=Math.round(10*r[9])/10+"°",w[1].textContent=Math.round(10*r[12])/10+"°",w[2].textContent=Math.round(10*r[15])/10+"°",w[3].textContent=Math.round(10*r[18])/10+"°"};return g.addEventListener("click",(n=>{S(n),m&&j(m)})),b.addEventListener("click",(n=>{S(n),m&&j(m)})),{updateDisplay:f=>{if(m=f,!Object.hasOwn(m,"error")||1006!==m.error.code||(E.textContent="...no such place",0)){0===h.length&&(h.push(c(m.forecast.forecastday[0].hour[9])),h.push(c(m.forecast.forecastday[0].hour[12])),h.push(c(m.forecast.forecastday[0].hour[15])),h.push(c(m.forecast.forecastday[0].hour[18]))),(e=>{const t=e.current.condition.text.toLowerCase();p=t.includes(n)?n:t.includes(r)?r:t.includes(s)?s:t.includes(A)?A:t.includes(l)?l:d})(m),j(m),(c=>{switch(c){case n:E.textContent="it's raining. Ugh.",x.setAttribute("src",e),y.textContent="rainy",p=d;break;case r:E.textContent="it's sunny!",x.setAttribute("src",t),y.textContent="sunny",p=d;break;case s:E.textContent="it's filled with clouds.",x.setAttribute("src",i),y.textContent="cloudy",p=d;break;case A:E.textContent="it's a bit sunny.",x.setAttribute("src",o),y.textContent="partially sunny",p=d;break;case l:E.textContent="it's snow.",x.setAttribute("src",a),y.textContent="snow",p=d;break;default:E.textContent="... no idea."}})(p),h[0].updateData(m.forecast.forecastday[0].hour[9]),h[1].updateData(m.forecast.forecastday[0].hour[12]),h[2].updateData(m.forecast.forecastday[0].hour[15]),h[3].updateData(m.forecast.forecastday[0].hour[18]);for(let n=0;n<k.length;n++)k[n].setAttribute("src",h[n].getPath())}}}}var l=r(379),d=r.n(l),f=r(795),u=r.n(f),m=r(569),p=r.n(m),C=r(565),h=r.n(C),g=r(216),b=r.n(g),E=r(589),B=r.n(E),y=r(426),v={};v.styleTagTransform=B(),v.setAttributes=h(),v.insert=p().bind(null,"head"),v.domAPI=u(),v.insertStyleElement=b(),d()(y.Z,v),y.Z&&y.Z.locals&&y.Z.locals,async function(){const e=s(),r=document.querySelector(".place");document.querySelector(".cel"),document.querySelector("fah"),r.addEventListener("keydown",(async r=>{"Enter"===r.key&&(r.preventDefault(),""===r.target.value?e.updateDisplay(await n()):e.updateDisplay(await n(r.target.value)))})),e.updateDisplay(await n(r.value))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,